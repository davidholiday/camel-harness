# by default archaius (what we use for configuration stuff) will pull from this file. put base-configuration value here
# (things that would be necessary to bootstrap the camel harness on a workstation)

# demonstrates how to inject connection and stub details for mocking/context-switching calls to external services.
# take care to ensure any bean/processor/connector referenced in a connection string here is named
# (here 'bean:' is not part of the name but a designation of type) the same way in JNDI (see AppContextLifecycle for JNDI
# registration plumbing)
sample.get.service.source.local=bean:sampleGetServiceResponseMockProcessor
sample.get.service.response.mockfile.local=sample_get_service_response_mockfile.json

# we deploy apps in pairs. the first is the one you're looking at. the other is a companion config project. both get put
# into the same kubernetes pod and thus share a common file system. the config project will put its config files in both
# json and properties format into the /config-volume directory. It also has something to do with the plumbing that pulls
# the contents of the shared config files from vault and puts them into the /shared-config-volume directory. The shared
# files come from a shared-config project in stash and are also serialized in both properties and json formats. this
# property tells the app where to find these files and what the filename is. app is currently configured to read the
# properties-encoded instances.
#
# these are loaded in an all or nothing fashion. if one of them isn't found or can't be loaded then none of them get into
# the config context TODO this should be fixed in a future version
#additional.properties.source.url.local=file:///config-volume/{{FILE_NAME}}.properties,file:///shared-config-volume/{{FILE_NAME}}.properties, ...